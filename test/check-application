#!/usr/bin/python3
# Run this with --help to see available options for tracing and debugging
# See https://github.com/cockpit-project/cockpit/blob/master/test/common/testlib.py
# "class Browser" and "class MachineCase" for the available API.

import os
import sys

# import Cockpit's machinery for test VMs and its browser test API
TEST_DIR = os.path.dirname(__file__)
sys.path.append(os.path.join(TEST_DIR, "common"))
sys.path.append(os.path.join(os.path.dirname(TEST_DIR), "bots/machine"))
import testlib


class TestApplication(testlib.MachineCase):
    def testBasic(self):
        b = self.browser
        m = self.machine

        self.login_and_go("/podman")

        # some version number
        b.wait_present("#version")
        b.wait_not_in_text("#version", "unknown")
        self.assertRegex(b.text("#version"), "podman version: [0-9.]+")

        # list images
        b.wait_present("#images")
        b.wait_in_text("#images", "busybox:latest")
        b.wait_in_text("#images", "alpine:latest")

        # no containers
        self.assertFalse(b.is_present("#containers li"))

        # create a container
        m.execute("podman run -d --name swamped-crate busybox sleep 1000")

        # FIXME: UI needs to listen to change signals and update automatically
        b.reload()
        b.wait_present("#content")
        b.enter_page("/podman")
        b.wait_present("#containers")

        b.wait_in_text("#containers", "swamped-crate (docker.io/library/busybox:latest): sleep 1000")

if __name__ == '__main__':
    testlib.test_main()
