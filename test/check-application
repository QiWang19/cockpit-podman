#!/usr/bin/python3
# Run this with --help to see available options for tracing and debugging
# See https://github.com/cockpit-project/cockpit/blob/master/test/common/testlib.py
# "class Browser" and "class MachineCase" for the available API.

import os
import sys

# import Cockpit's machinery for test VMs and its browser test API
TEST_DIR = os.path.dirname(__file__)
sys.path.append(os.path.join(TEST_DIR, "common"))
sys.path.append(os.path.join(os.path.dirname(TEST_DIR), "bots/machine"))
import testlib


class TestApplication(testlib.MachineCase):

    def testBasic(self):
        b = self.browser
        m = self.machine

        self.login_and_go("/podman")
        b.wait_present("#app")

        # b.wait_present("#connect-page")
        # b.click("#connect-page button")
        b.wait_present(".content-filter div")
        b.wait_present("#containers-images")
        b.wait_in_text("#containers-images", "busybox:latest")

        # show image listing toggle
        b.wait_present('#containers-images tr:contains("busybox:latest")')
        b.wait_visible('#containers-images tr:contains("busybox:latest")')
        b.click('#containers-images tbody tr:contains("busybox:latest") td.listing-ct-toggle')
        b.wait_visible('#containers-images tbody tr:contains("busybox:latest") + tr button.btn-delete')

        # show all containers to interact with stopped ones
        m.execute("podman run -d --name swamped-crate busybox sh")
        b.click("#containers-containers-filter button")
        b.wait_visible("#containers-containers-filter .dropdown-menu")
        b.click("#containers-containers-filter li[data-data='all'] a")
        b.wait_visible("#containers-containers")
        b.wait_visible('#containers-containers tr:contains("busybox:latest")')

        # show container listing toggle
        b.click('#containers-containers tbody tr:contains("busybox:latest") td.listing-ct-toggle')
        b.wait_visible('#containers-containers tbody tr:contains("busybox:latest") + tr button.btn-delete')

        b.click("#containers-containers-filter button")
        b.wait_visible("#containers-containers-filter .dropdown-menu")
        b.click("#containers-containers-filter li[data-data='running'] a")
        b.wait_visible("#containers-containers")
        b.wait_in_text("#containers-containers", "No running containers")

        # delete busybox:latest from container listing toggle
        b.click("#containers-containers-filter button")
        b.wait_visible("#containers-containers-filter .dropdown-menu")
        b.click("#containers-containers-filter li[data-data='all'] a")
        b.wait_visible("#containers-containers")
        b.wait_visible('#containers-containers tr:contains("busybox:latest")')
        b.click('#containers-containers tbody tr:contains("busybox:latest") td.listing-ct-toggle')
        b.wait_visible('#containers-containers tbody tr:contains("busybox:latest") + tr button.btn-delete')
        b.click('#containers-containers tbody tr:contains("busybox:latest") + tr button.btn-delete')
        with b.wait_timeout(20):
            b.wait_present(".modal-dialog div")

        # FIXME: UI needs to listen to change signals and update automatically
        # create a container
        # m.execute("podman run -d --name swamped-crate alpine sleep 10000")

        b.reload()

if __name__ == '__main__':
    testlib.test_main()